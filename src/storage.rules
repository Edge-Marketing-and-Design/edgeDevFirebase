rules_version = '2';
// #EDGE FIREBASE RULES START
service firebase.storage {
  match /b/{bucket}/o {
    // Match the file path structure you're using, simulating the Firestore document path structure for permissions.
    function getRolePermission(role, permissionCheck) {
      let permissions = {
        'admin': {'assign': true, 'delete': true, 'read': true, 'write': true},
        'editor': {'assign': false, 'delete': true, 'read': true, 'write': true},
        'user': {'assign': false, 'delete': false, 'read': true, 'write': false},
        'writer': {'assign': false, 'delete': false, 'read': true, 'write': true}
      };
      return permissions[role][permissionCheck];
    }
    function checkPermission(permissionCheck, collectionPath) {
      let user = firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data;
      let ruleHelper = firestore.get(/databases/(default)/documents/rule-helpers/$(request.auth.uid)).data;
      return  request.auth != null &&
              collectionPath in ruleHelper &&
              "permissionCheckPath" in ruleHelper[collectionPath] &&
              (
                ruleHelper[collectionPath].permissionCheckPath == "-" ||
                collectionPath.matches("^" + ruleHelper[collectionPath].permissionCheckPath + ".*$")
              ) &&
              (
                (
                  "roles" in user &&
                  ruleHelper[collectionPath].permissionCheckPath in user.roles &&
                  getRolePermission(user.roles[ruleHelper[collectionPath].permissionCheckPath].role, permissionCheck)
                ) ||
                (
                  "specialPermissions" in user &&
                  ruleHelper[collectionPath].permissionCheckPath in user.specialPermissions &&
                  permissionCheck in user.specialPermissions[ruleHelper[collectionPath].permissionCheckPath] &&
                  user.specialPermissions[ruleHelper[collectionPath].permissionCheckPath][permissionCheck]
                )
              );
    }
    match /public/{fileId} {
      // Public directory with special rules
      allow read: if true; // Unrestricted read access
      allow write, delete: if request.auth != null; // Write and delete require authentication
    }
    match /{dir}/{fileId} {
      // General read permission check based on Firestore data
      allow read: if checkPermission("read", dir);
      // General write permission check, including creating and updating files
      allow write: if checkPermission("write", dir);
      // General delete permission check
      allow delete: if checkPermission("write", dir);
    }
  }
}
// #EDGE FIREBASE RULES END
